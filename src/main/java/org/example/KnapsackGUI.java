package org.example;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Locale;

public class KnapsackGUI {
    private JTextField txtIn_capacity;
    private JTextArea txtBox_Items;
    private JTextArea txtBox_Result;
    private JButton btn_Solve;
    private JTextField txtIN_seed;
    private JTextField txtIn_count;
    private JLabel lbl_Title;
    private JPanel panel;
    private JLabel lbl_Result;
    private JLabel lbl_itemCount;
    private JLabel lbl_seed;
    private JLabel lbl_capacity;
    private JLabel lbl_item;

    public KnapsackGUI() {
        btn_Solve.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int count = Integer.valueOf(txtIn_count.getText().toString());
                int seed = Integer.valueOf(txtIN_seed.getText().toString());
                int capacity = Integer.valueOf(txtIn_capacity.getText().toString());

                Problem problem = new Problem(count, seed, 1, 10);
                Result result = problem.Solve(capacity);

                txtBox_Items.setText(problem.printItems());

                txtBox_Result.setText("");
                txtBox_Result.append(result.toString());


            }
        });

        txtIn_capacity.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                super.keyPressed(e);
                char c = e.getKeyChar();
                if ((c >= '0' && c <= '9') || c == 8 || c == 127) {
                    txtIn_capacity.setEditable(true);

                } else {
                    txtIn_capacity.setEditable(false);

                }
            }
        });

        txtIn_count.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                super.keyPressed(e);
                char c = e.getKeyChar();
                if ((c >= '0' && c <= '9') || c == 8 || c == 127) {
                    txtIn_count.setEditable(true);

                } else {
                    txtIn_count.setEditable(false);

                }
            }
        });

        txtIN_seed.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                super.keyPressed(e);
                char c = e.getKeyChar();
                if ((c >= '0' && c <= '9') || c == 8 || c == 127) {
                    txtIN_seed.setEditable(true);

                } else {
                    txtIN_seed.setEditable(false);

                }
            }
        });

    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("KnapsackGUI");
        frame.setContentPane(new KnapsackGUI().panel);
        frame.setPreferredSize(new Dimension(1200, 800));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridBagLayout());
        panel.setBackground(new Color(-8937052));
        final JPanel spacer1 = new JPanel();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 7;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel.add(spacer1, gbc);
        txtIn_capacity = new JTextField();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.weightx = 0.2;
        gbc.weighty = 0.1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(txtIn_capacity, gbc);
        btn_Solve = new JButton();
        btn_Solve.setText("Rozwiąż");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.gridwidth = 2;
        gbc.gridheight = 2;
        gbc.weightx = 0.4;
        gbc.weighty = 0.1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(btn_Solve, gbc);
        txtIN_seed = new JTextField();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.weightx = 0.2;
        gbc.weighty = 0.1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(txtIN_seed, gbc);
        txtIn_count = new JTextField();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.weightx = 0.2;
        gbc.weighty = 0.1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(txtIn_count, gbc);
        final JScrollPane scrollPane1 = new JScrollPane();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 7;
        gbc.gridwidth = 2;
        gbc.gridheight = 2;
        gbc.weighty = 0.6;
        gbc.fill = GridBagConstraints.BOTH;
        panel.add(scrollPane1, gbc);
        txtBox_Items = new JTextArea();
        txtBox_Items.setEditable(false);
        txtBox_Items.setLineWrap(false);
        scrollPane1.setViewportView(txtBox_Items);
        final JScrollPane scrollPane2 = new JScrollPane();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 2;
        gbc.gridheight = 7;
        gbc.weightx = 0.6;
        gbc.fill = GridBagConstraints.BOTH;
        panel.add(scrollPane2, gbc);
        txtBox_Result = new JTextArea();
        txtBox_Result.setEditable(false);
        scrollPane2.setViewportView(txtBox_Result);
        lbl_Title = new JLabel();
        Font lbl_TitleFont = this.$$$getFont$$$("Arial", Font.BOLD, 36, lbl_Title.getFont());
        if (lbl_TitleFont != null) lbl_Title.setFont(lbl_TitleFont);
        lbl_Title.setForeground(new Color(-16711423));
        lbl_Title.setHorizontalAlignment(0);
        lbl_Title.setText("Problem plecakowy");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 4;
        gbc.weightx = 1.0;
        gbc.weighty = 0.1;
        gbc.fill = GridBagConstraints.BOTH;
        panel.add(lbl_Title, gbc);
        lbl_Result = new JLabel();
        Font lbl_ResultFont = this.$$$getFont$$$("Arial", Font.BOLD, 24, lbl_Result.getFont());
        if (lbl_ResultFont != null) lbl_Result.setFont(lbl_ResultFont);
        lbl_Result.setForeground(new Color(-16711423));
        lbl_Result.setHorizontalAlignment(0);
        lbl_Result.setText("Zawartość plecaka");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 1;
        gbc.weightx = 0.6;
        gbc.weighty = 0.1;
        gbc.fill = GridBagConstraints.BOTH;
        panel.add(lbl_Result, gbc);
        lbl_itemCount = new JLabel();
        Font lbl_itemCountFont = this.$$$getFont$$$("Arial", Font.BOLD, 16, lbl_itemCount.getFont());
        if (lbl_itemCountFont != null) lbl_itemCount.setFont(lbl_itemCountFont);
        lbl_itemCount.setForeground(new Color(-16711423));
        lbl_itemCount.setHorizontalAlignment(0);
        lbl_itemCount.setText("Ilość przedmiotów");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 0.2;
        gbc.weighty = 0.1;
        gbc.fill = GridBagConstraints.BOTH;
        panel.add(lbl_itemCount, gbc);
        lbl_seed = new JLabel();
        Font lbl_seedFont = this.$$$getFont$$$("Arial", Font.BOLD, 16, lbl_seed.getFont());
        if (lbl_seedFont != null) lbl_seed.setFont(lbl_seedFont);
        lbl_seed.setForeground(new Color(-16711423));
        lbl_seed.setHorizontalAlignment(0);
        lbl_seed.setText("Seed");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 0.2;
        gbc.weighty = 0.1;
        gbc.fill = GridBagConstraints.BOTH;
        panel.add(lbl_seed, gbc);
        lbl_capacity = new JLabel();
        Font lbl_capacityFont = this.$$$getFont$$$("Arial", Font.BOLD, 16, lbl_capacity.getFont());
        if (lbl_capacityFont != null) lbl_capacity.setFont(lbl_capacityFont);
        lbl_capacity.setForeground(new Color(-16711423));
        lbl_capacity.setHorizontalAlignment(0);
        lbl_capacity.setText("Pojemność plecaka");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weightx = 0.2;
        gbc.weighty = 0.1;
        gbc.fill = GridBagConstraints.BOTH;
        panel.add(lbl_capacity, gbc);
        lbl_item = new JLabel();
        Font lbl_itemFont = this.$$$getFont$$$("Arial", Font.BOLD, 16, lbl_item.getFont());
        if (lbl_itemFont != null) lbl_item.setFont(lbl_itemFont);
        lbl_item.setForeground(new Color(-16777216));
        lbl_item.setHorizontalAlignment(0);
        lbl_item.setHorizontalTextPosition(0);
        lbl_item.setText("Przedmioty");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(lbl_item, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}
